const TelegramApi = require("node-telegram-bot-api");
const {
  commandsBtns,
  commandsValues,
  message,
} = require("./common/constants/commands");
const {
  startOptions,
  replacementOptions,
  paymentOptions,
} = require("./common/constants/options");

const token = "7040341581:AAEWqVvHe00KWU9-jIvFsUZwKUmT6tebS3A";
const bot = new TelegramApi(token, { polling: true });

let userSteps = [];
let userInfo = {
  replenishmentAmount: "",
  accountId: "",
  screenshot: null,
};

const cancel = (chatId) => {
  userSteps = userSteps.filter((item) => item.chatId !== chatId);
  userInfo = {
    replenishmentAmount: "",
    accountId: "",
    screenshot: null,
  };

  console.log("userSteps", userSteps);
  console.log("userInfo", userInfo);
};

const createNewSteps = async (chatId) => {
  let newChatStep = {
    chatId,
    currentStep: 1,
  };
  userSteps.push(newChatStep);
};

const udpatedSteps = async (chatId) => {
  const updated = userSteps.map((item) => {
    if (item.chatId === chatId) {
      return {
        ...item,
        currentStep: item.currentStep + 1,
      };
    }
    return item;
  });
  userSteps = updated;
};

bot.setMyCommands(commandsBtns);

bot.on("message", async (msg) => {
  const text = msg.text;
  const chatId = msg.chat.id;
  const messageId = msg.message_id;
  console.log("message", msg);

  if (text === commandsValues.cancel) {
    return cancel(chatId);
  }

  if (text === commandsValues.start) {
    await createNewSteps(chatId);
    return bot.sendMessage(
      chatId,
      "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ 1xbet_official_kg - –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤.",
      startOptions
    );
  }

  if (text === commandsValues.info) {
    return bot.sendMessage(
      chatId,
      `–í–∞—Å –∑–æ–≤—É—Ç ${msg.from.first_name + msg.from.last_name}`
    );
  }

  if (text === commandsValues.showBtn) {
    return bot.sendMessage(chatId, "showBtn");
  }

  if (userSteps[0]?.currentStep === 3) {
    userInfo = { ...userInfo, replenishmentAmount: text };
    console.log(userInfo);
    await udpatedSteps(chatId);
    return bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ ID(–ù–æ–º–µ—Ä –°—á—ë—Ç–∞) 1XBET!");
  }

  if (userSteps[0]?.currentStep === 4) {
    userInfo = { ...userInfo, accountId: text };
    console.log(userInfo);
    return bot.sendMessage(
      chatId,
      `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º.

–†–µ–∫–≤–∏–∑–∏—Ç—ã: OPTIMA BANK
4169585352221641
–†–µ–∫–≤–∏–∑–∏—Ç—ã:¬† –û –¥–µ–Ω—å–≥–∏! (–µ–¥–∏–Ω–∏—Ü—ã)
0509525550
    
–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µüëá`,
      paymentOptions
    );
  }

  if (userSteps[0]?.currentStep === 5) {
    userInfo = { ...userInfo, screenshot: msg.document || msg.photo || text };
    console.log("userInfo last - ", userInfo);

    return bot.sendMessage(
      chatId,
      `‚úÖ–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!

‚ö†Ô∏è –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 5 –¥–æ 15 –º–∏–Ω—É—Ç. 
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ!
    
‚ö†Ô∏è–ü—Ä–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—è—Ö –¥–æ 3 –ß–∞—Å–æ–≤!
    
‚úÖ–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤!`
    );
  }

  return bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.");
});

bot.on("callback_query", async (msg) => {
  const data = msg.data;
  const chatId = msg.message.chat.id;
  const messageId = msg.message.message_id;
  console.log("callback_query", msg);
  if (data === message.replacement) {
    udpatedSteps(chatId);
    await bot.deleteMessage(chatId, messageId);
    return bot.sendMessage(
      chatId,
      "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è!",
      replacementOptions
    );
  }

  if (data === message.mbank || data === message.omoney) {
    udpatedSteps(chatId);
    await bot.deleteMessage(chatId, messageId);
    return bot.sendMessage(
      chatId,
      `–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è KGS.
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 50.
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 25 000`
    );
  }

  if (data === message.paid) {
    udpatedSteps(chatId);
    await bot.deleteMessage(chatId, messageId);
    return bot.sendMessage(
      chatId,
      `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –°–ö–†–ò–ù–®–û–¢ –ü–ª–∞—Ç—ë–∂–∞!

‚ùóÔ∏è–í —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∏–¥–Ω—ã –î–∞—Ç–∞ –∏ –í—Ä–µ–º—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞!
–í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–∞—à –ø–ª–∞—Ç—ë–∂ –º–æ–∂–µ—Ç –Ω–µ –ø–æ—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –≤–∞—à –°—á—ë—Ç!`
    );
  }

  if (data === message.conclusion) {
    return bot.sendMessage(chatId, "test");
  }
});
